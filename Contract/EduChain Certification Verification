// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title EduChain Certificate Verification
 * @dev This contract allows educational institutions to issue and verify certificates on the blockchain.
 */
contract EduChainCertificateVerification {
    address public admin;

    struct Certificate {
        string studentName;
        string courseName;
        uint256 issueDate;
        address issuer;
        bool isValid;
    }

    mapping(bytes32 => Certificate) private certificates;

    event CertificateIssued(bytes32 certificateId, string studentName, string courseName, address issuer);
    event CertificateRevoked(bytes32 certificateId, address revokedBy);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    /**
     * @dev Issue a new certificate
     * @param _studentName Name of the student
     * @param _courseName Name of the course
     */
    function issueCertificate(string memory _studentName, string memory _courseName) external onlyAdmin {
        bytes32 certId = keccak256(abi.encodePacked(_studentName, _courseName, block.timestamp));
        certificates[certId] = Certificate(_studentName, _courseName, block.timestamp, msg.sender, true);
        emit CertificateIssued(certId, _studentName, _courseName, msg.sender);
    }

    /**
     * @dev Verify if a certificate is valid
     * @param certId The unique certificate ID
     * @return certificate details
     */
    function verifyCertificate(bytes32 certId) external view returns (Certificate memory) {
        require(certificates[certId].isValid, "Certificate not valid or doesn't exist");
        return certificates[certId];
    }

    /**
     * @dev Revoke an issued certificate
     * @param certId The unique certificate ID
     */
    function revokeCertificate(bytes32 certId) external onlyAdmin {
        require(certificates[certId].isValid, "Certificate already revoked or invalid");
        certificates[certId].isValid = false;
        emit CertificateRevoked(certId, msg.sender);
    }
}
